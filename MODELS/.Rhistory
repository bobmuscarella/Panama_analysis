}
###########################
# PREP FOR TESTING:
if(pc==F){
setwd("/Users/Bob/Projects/Postdoc/Panama/DATA")
load("Panama_AnalysisData_12.17.16.RDA") # tdata
load("panama_ITV_traits_6.7.16.RDA") # traits
}
tdata <- tdata[!is.na(tdata$growth) & !is.na(tdata$All.NCI) & tdata$Not.Edge==1,]
tdata <- droplevels(tdata)
tdata$log.all.nci <- log(tdata$All.NCI)
tdata$log.dbh <- log(tdata$dbh)
traits$log.LMA.mean <- log(traits$LMA.mean)
###########################
###########################
#### Prepare data for input  ####
###########################
# Get species with WD data from Panama
wdsp <- names(rowSums(table(tdata$spplot, tdata$wd.source)[,1:2]))[rowSums(table(tdata$spplot, tdata$wd.source)[,1:2])>0]
# Get species with LMA data from Panama
lmasp <- names(rowSums(table(tdata$spplot, tdata$lma.source)[,1:3]))[rowSums(table(tdata$spplot, tdata$lma.source)[,1:3])>0]
foctraitsp <- unique(wdsp, lmasp)
tdata <- tdata[tdata$spplot %in% foctraitsp,]
# If you want to drop species with NA for both traits
d <- tdata[tdata$spplot %in% traits$sp[!is.na(traits$WD.mean)] | tdata$spplot %in% traits$sp[!is.na(traits$log.LMA.mean)],]
# If you want to drop species with NA for either trait
#d <- tdata[tdata$spplot %in% traits$sp[!is.na(traits$WD.mean)] & tdata$spplot %in% traits$sp[!is.na(traits$log.LMA.mean)],]
# Or not
#d <- tdata
d <- droplevels(d)
### Center / scale variables across full dataset
d$log.dbh.zall <- as.vector(scale(d$log.dbh))
d$log.all.nci.zall <- as.vector(scale(d$log.all.nci))
d$log.all.size.nci.zall[d$dbh<100] <- as.vector(scale(d$log.all.nci[d$dbh<100]))
d$log.all.size.nci.zall[d$dbh>=100] <- as.vector(scale(d$log.all.nci[d$dbh>=100]))
dp <- d[d$plot==p,]
cutoff <- (100)  # Setting cutoff to neg value will put everything in 1 size class.
dp$size.class <- ifelse(dp$dbh <= cutoff, 1, 2)
dps <- dp[dp$size.class %in% size,]
dps$sd5.growth  <- (abs(dps$growth) < (sd(dps$growth)*5))
# dps <- dps[dps$Growth.Include.3,]
dps <- dps[dps$sd5.growth & dps$Growth.Include.3,]
### Center / scale other variables within size class
dps$log.dbh.z <- as.vector(scale(dps$log.dbh))
dps$log.all.nci.z <- as.vector(scale(dps$log.all.nci))
dps$growth.z <- as.vector(scale(dps$growth, center=F))
dps <- dps[,c('spplot','plot','census','growth','dbh',
'log.dbh.zall','log.all.nci.zall', 'log.dbh.z',
'id','log.all.nci.z','days','log.all.size.nci.zall')]
### Create an individual ID
dps <- droplevels(dps)
dps$indiv <- as.numeric(as.factor(dps$id))
### Order for correct indexing
dps <- dps[order(dps$spplot, dps$indiv, dps$census),]
### GET AND SCALE SPECIES MEAN TRAIT VALUES AND AND INTRASPECIFIC SD'S...
wd.mean <- as.vector(traits$WD.mean[match(unique(dps$spplot), traits$sp)])
wd.mean.z <- as.vector(scale(wd.mean))
wd.mean.z[is.na(wd.mean.z)] <- rep(0, length(wd.mean.z[is.na(wd.mean.z)]))
lma.mean <- as.vector(traits$log.LMA.mean[match(unique(dps$spplot), traits$sp)])
lma.mean.z <- as.vector(scale(lma.mean))
lma.mean.z[is.na(lma.mean.z)] <- rep(0, length(lma.mean.z[is.na(lma.mean.z)]))
tmeans.z <- cbind(wd.mean.z, lma.mean.z)
colnames(tmeans.z) <- NULL
#################################
#### Organize the input data ####
#################################
data = list (
N = nrow(dps),
tree = dps$indiv,
n.tree = length(unique(dps$indiv)),
n.sp = length(unique(dps$spplot)),
sp = as.numeric(as.factor(dps$spplot)),
obs.growth = as.numeric(dps$growth),
days = dps$days/365,
#  log.nci = as.numeric(dps[,'log.all.nci.zall']),
log.nci = as.numeric(dps[,'log.all.nci.z']),
# log.nci = as.numeric(dps[,'log.all.size.nci.zall']),
dbh = as.vector(dps$dbh),
log.dbh = dps$log.dbh.z,
tmeans.z = tmeans.z
)
### Add an indicator to set individual effect of non-rep indiv to zero
repindiv <- names(table(data$tree))[table(data$tree) > 1]
data$indicator <- as.numeric(data$tree %in% repindiv)
head(data$obs.growth)
lapply(data$head)
lapply(data, head)
sink()
sink(paste(modpath,"Growth_growthz_Merror_noITV_2.16.17BCI.bug",sep=''))
sink()
sink()
sink()
lapply(data, head)
mod$data
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
### Running on PC???
pc <- T
#######################################
###  START HERE WITH PROCESSED DATA ###
#######################################
if(pc==T){
setwd("K:/Bob/Panama/DATA")
load("Panama_AnalysisData_12.17.16.RDA") # tdata
load("panama_ITV_traits_6.7.16.RDA") # traits
}
###########################
# PREP FOR TESTING:
if(pc==F){
setwd("/Users/Bob/Projects/Postdoc/Panama/DATA")
load("Panama_AnalysisData_12.17.16.RDA") # tdata
load("panama_ITV_traits_6.7.16.RDA") # traits
}
tdata <- tdata[!is.na(tdata$survival) & !is.na(tdata$All.NCI) & tdata$Not.Edge==1,]
tdata <- droplevels(tdata)
tdata$log.all.nci <- log(tdata$All.NCI)
tdata$log.dbh <- log(tdata$dbh)
traits$log.LMA.mean <- log(traits$LMA.mean)
###########################
###########################
#### Prepare data for input  ####
###########################
# Get species with WD data from Panama
wdsp <- names(rowSums(table(tdata$spplot, tdata$wd.source)[,1:2]))[rowSums(table(tdata$spplot, tdata$wd.source)[,1:2])>0]
# Get species with LMA data from Panama
lmasp <- names(rowSums(table(tdata$spplot, tdata$lma.source)[,1:3]))[rowSums(table(tdata$spplot, tdata$lma.source)[,1:3])>0]
foctraitsp <- unique(wdsp, lmasp)
tdata <- tdata[tdata$spplot %in% foctraitsp,]
# If you want to drop species with NA for both traits
d <- tdata[tdata$spplot %in% traits$sp[!is.na(traits$WD.mean)] | tdata$spplot %in% traits$sp[!is.na(traits$log.LMA.mean)],]
# If you want to drop species with NA for either trait
#d <- tdata[tdata$spplot %in% traits$sp[!is.na(traits$WD.mean)] & tdata$spplot %in% traits$sp[!is.na(traits$log.LMA.mean)],]
# Or not
#d <- tdata
d <- droplevels(d)
### Center / scale variables across full dataset
d$log.dbh.zall <- as.vector(scale(d$log.dbh))
d$log.all.nci.zall <- as.vector(scale(d$log.all.nci))
d$log.all.size.nci.zall[d$dbh<100] <- as.vector(scale(d$log.all.nci[d$dbh<100]))
d$log.all.size.nci.zall[d$dbh>=100] <- as.vector(scale(d$log.all.nci[d$dbh>=100]))
##################################################
#### Start loop to model each plot separately ####
##################################################
# p <- 3
for(p in c(1,3)) {
dp <- d[d$plot==p,]
######################################################################################
#### Standardize and Center coefficients (within plots, within size classes 10cm) ####
######################################################################################
###### Generic size class: Center / scale DBH within species, within size class #####
cutoff <- (100)  # Setting cutoff to neg value will put everything in 1 size class.
dp$size.class <- ifelse(dp$dbh <= cutoff, 1, 2)
#   size <- 2
for(size in c(1:2)) {
dps <- dp[dp$size.class %in% size,]
### Center / scale other variables within size class
dps$log.dbh.z <- as.vector(scale(dps$log.dbh))
dps$log.all.nci.z <- as.vector(scale(dps$log.all.nci))
dps <- dps[,c('spplot','plot','census','survival','days',
'log.dbh.zall','log.all.nci.zall', 'log.dbh.z',
'id','log.all.nci.z','log.all.size.nci.zall')]
### Create an individual ID
dps <- droplevels(dps)
dps$indiv <- as.numeric(as.factor(dps$id))
### Order for correct indexing
dps <- dps[order(dps$spplot, dps$indiv, dps$census),]
### GET AND SCALE SPECIES MEAN TRAIT VALUES AND AND INTRASPECIFIC SD'S...
wd.mean <- as.vector(traits$WD.mean[match(unique(dps$spplot), traits$sp)])
wd.mean.z <- as.vector(scale(wd.mean))
wd.mean.z[is.na(wd.mean.z)] <- rep(0, length(wd.mean.z[is.na(wd.mean.z)]))
lma.mean <- as.vector(traits$log.LMA.mean[match(unique(dps$spplot), traits$sp)])
lma.mean.z <- as.vector(scale(lma.mean))
lma.mean.z[is.na(lma.mean.z)] <- rep(0, length(lma.mean.z[is.na(lma.mean.z)]))
tmeans.z <- cbind(wd.mean.z, lma.mean.z)
colnames(tmeans.z) <- NULL
#################################
#### Organize the input data ####
#################################
data = list (
alive = as.numeric(dps$survival),
N = nrow(dps),
nsp = length(unique(dps$spplot)),
sp = as.numeric(as.factor(dps$spplot)),
ind = dps$indiv,
nind = length(unique(dps$indiv)),
days = dps$days/365.25,
ncov = 3,
COV = cbind(rep(1, nrow(dps)),
as.numeric(dps[,'log.all.size.nci.zall']),
dps$log.dbh.z),
meanWD = tmeans.z[,1],
meanLMA = tmeans.z[,2]
)
modpath <- ("K:/Bob/Panama/GIT/Panama_Analysis/MODELS/")
fit <- stan(file=paste(modpath,"Survival_2.16.17.stan",sep=''),
data=data, iter=2000, warmup=1000, chains=3, cores=3)
file <- paste(ifelse(p==1,'coc',ifelse(p==2,'bci','she')), ifelse(size==1,'sm','lg'), 'Rdata',sep=".")
saveRDS(fit, file=paste("K:/Bob/Panama/RESULTS/_2.20.17_nciall_stan/survival",file,sep='/'))
}
}
res <- data.frame()
#posterior distribution
t1 <- extract(fit,"t[1]")
t2 <- extract(fit,"t[2]")
t3 <- extract(fit,"t[3]")
t4 <- extract(fit,"t[4]")
mu1 <- extract(fit,"int1[1]")
mu2 <- extract(fit,"int1[2]")
mu3 <- extract(fit,"int1[3]")
tmp_res_q <- as.data.frame(t(apply(cbind(mu1[[1]],mu2[[1]],mu3[[1]],t1[[1]],t2[[1]],t3[[1]],t4[[1]]), 2, quantile,c(0.025,0.05,0.5,0.95,0.975))))
tmp_res_q$param <- c("mu1","mu2","mu3","t1","t2","t3","t4")
tmp_res_q$p <- p
tmp_res_q$size <- size
res <- rbind(res, tmp_res_q)
res
res <- data.frame()
for(p in c(1,3)){
for(size in c(1,2)){
file <- paste(ifelse(p==1,'coc',ifelse(p==2,'bci','she')), ifelse(size==1,'sm','lg'), 'Rdata',sep=".")
fit <- readRDS(file=paste("K:/Bob/Panama/RESULTS/_2.20.17_nciall_stan/survival",file,sep='/'))
#posterior distribution
t1 <- extract(fit,"t[1]")
t2 <- extract(fit,"t[2]")
t3 <- extract(fit,"t[3]")
t4 <- extract(fit,"t[4]")
mu1 <- extract(fit,"int1[1]")
mu2 <- extract(fit,"int1[2]")
mu3 <- extract(fit,"int1[3]")
tmp_res_q <- as.data.frame(t(apply(cbind(mu1[[1]],mu2[[1]],mu3[[1]],t1[[1]],t2[[1]],t3[[1]],t4[[1]]), 2, quantile,c(0.025,0.05,0.5,0.95,0.975))))
tmp_res_q$param <- c("mu1","mu2","mu3","t1","t2","t3","t4")
tmp_res_q$p <- p
tmp_res_q$size <- size
res <- rbind(res, tmp_res_q)
}
}
res$m <- 'survival'
res$s <- ifelse(res$size==1, 'sm','lg')
colnames(res)[c(1:5,7)] <- c('q2.5','q5','q50','q95','q97.5','p')
res <- res[,c('m','s','p','param','q2.5','q5','q50','q95','q97.5')]
res
res[5:9,] <- round(res[5:9,], 3)
res[5:9,]
res[5:9,] <- round(res[,5:9], 3)
res[,5:9] <- round(res[,5:9], 3)
res
res <- data.frame()
for(p in c(1,3)){
for(size in c(1,2)){
file <- paste(ifelse(p==1,'coc',ifelse(p==2,'bci','she')), ifelse(size==1,'sm','lg'), 'Rdata',sep=".")
fit <- readRDS(file=paste("K:/Bob/Panama/RESULTS/_2.20.17_nciall_stan/survival",file,sep='/'))
#posterior distribution
t1 <- extract(fit,"t[1]")
t2 <- extract(fit,"t[2]")
t3 <- extract(fit,"t[3]")
t4 <- extract(fit,"t[4]")
mu1 <- extract(fit,"int1[1]")
mu2 <- extract(fit,"int1[2]")
mu3 <- extract(fit,"int1[3]")
tmp_res_q <- as.data.frame(t(apply(cbind(mu1[[1]],mu2[[1]],mu3[[1]],t1[[1]],t2[[1]],t3[[1]],t4[[1]]), 2, quantile,c(0.025,0.05,0.5,0.95,0.975))))
tmp_res_q$param <- c("mu1","mu2","mu3","t1","t2","t3","t4")
tmp_res_q$p <- p
tmp_res_q$size <- size
res <- rbind(res, tmp_res_q)
}
}
res$m <- 'survival'
res$s <- ifelse(res$size==1, 'sm','lg')
colnames(res)[c(1:5,7)] <- c('q2.5','q5','q50','q95','q97.5','p')
res <- res[,c('m','s','p','param','q2.5','q5','q50','q95','q97.5')]
res[,5:9] <- round(res[,5:9], 3)
res
sign(res[,5]!=sign(res[,9])
write.csv(res, file="K:/Bob/Panama/RESULTS/_2.19.17_stan/survival/output.csv")
sign(res[,5])!=sign(res[,9])
res[sign(res[,5])!=sign(res[,9]),]
res[sign(res[,5])==sign(res[,9]),]
res[sign(res[,5])==sign(res[,9]) & res$param!='mu1',]
res[sign(res[,5])==sign(res[,9]) & res$param!='mu1' & res$param!='mu2',]
res
p=1
size=1
library(rjags)
load.module('mix')
set.factory("mix::TemperedMix", 'sampler', FALSE)
load.module('glm')
library(coda)
library(runjags)
# library(jagsUI)
### Running on PC???
pc <- T
#######################################
###  START HERE WITH PROCESSED DATA ###
#######################################
if(pc==T){
setwd("K:/Bob/Panama/DATA")
load("Panama_AnalysisData_12.17.16.RDA") # tdata
load("panama_ITV_traits_6.7.16.RDA") # traits
}
###########################
# PREP FOR TESTING:
if(pc==F){
setwd("/Users/Bob/Projects/Postdoc/Panama/DATA")
load("Panama_AnalysisData_12.17.16.RDA") # tdata
load("panama_ITV_traits_6.7.16.RDA") # traits
}
tdata <- tdata[!is.na(tdata$growth) & !is.na(tdata$All.NCI) & tdata$Not.Edge==1,]
tdata <- droplevels(tdata)
tdata$log.all.nci <- log(tdata$All.NCI)
tdata$log.dbh <- log(tdata$dbh)
traits$log.LMA.mean <- log(traits$LMA.mean)
###########################
###########################
#### Prepare data for input  ####
###########################
# Get species with WD data from Panama
wdsp <- names(rowSums(table(tdata$spplot, tdata$wd.source)[,1:2]))[rowSums(table(tdata$spplot, tdata$wd.source)[,1:2])>0]
# Get species with LMA data from Panama
lmasp <- names(rowSums(table(tdata$spplot, tdata$lma.source)[,1:3]))[rowSums(table(tdata$spplot, tdata$lma.source)[,1:3])>0]
foctraitsp <- unique(wdsp, lmasp)
tdata <- tdata[tdata$spplot %in% foctraitsp,]
# If you want to drop species with NA for both traits
#d <- tdata[tdata$spplot %in% traits$sp[!is.na(traits$WD.mean)] | tdata$spplot %in% traits$sp[!is.na(traits$log.LMA.mean)],]
# If you want to drop species with NA for either trait
d <- tdata[tdata$spplot %in% traits$sp[!is.na(traits$WD.mean)] & tdata$spplot %in% traits$sp[!is.na(traits$log.LMA.mean)],]
# Or not
#d <- tdata
d <- droplevels(d)
### Center / scale variables across full dataset
d$log.dbh.zall <- as.vector(scale(d$log.dbh))
d$log.all.nci.zall <- as.vector(scale(d$log.all.nci))
d$log.all.size.nci.zall[d$dbh<100] <- as.vector(scale(d$log.all.nci[d$dbh<100]))
d$log.all.size.nci.zall[d$dbh>=100] <- as.vector(scale(d$log.all.nci[d$dbh>=100]))
dp <- d[d$plot==p,]
######################################################################################
#### Standardize and Center coefficients (within plots, within size classes 10cm) ####
######################################################################################
###### Generic size class: Center / scale DBH within species, within size class #####
cutoff <- (100)  # Setting cutoff to neg value will put everything in 1 size class.
dp$size.class <- ifelse(dp$dbh <= cutoff, 1, 2)
dps <- dp[dp$size.class %in% size,]
# TRY TO REMOVE SIZE CLASS BY MODELING RGR
#dps <- dp
dps$sd5.growth  <- (abs(dps$growth) < (sd(dps$growth)*5))
dps$sd5.RGR  <- (abs(dps$RGR) < (sd(dps$RGR)*5))
dps <- dps[dps$Growth.Include.3,]
#dps <- dps[dps$sd5.growth & dps$Growth.Include.3,]
dps <- dps[dps$sd5.growth & dps$sd5.RGR & dps$Growth.Include.3,]
### Center / scale other variables within size class
dps$log.dbh.z <- as.vector(scale(dps$log.dbh))
dps$log.all.nci.z <- as.vector(scale(dps$log.all.nci))
dps$growth.z <- as.vector(scale(dps$growth, center=F))
dps$RGR.z <- as.vector(scale(dps$growth, center=F))
dps <- dps[,c('spplot','plot','census','growth.z','RGR.z','growth','dbh',
'log.dbh.zall','log.all.nci.zall', 'log.dbh.z',
'id','log.all.nci.z','days','log.all.size.nci.zall')]
### Create an individual ID
dps <- droplevels(dps)
dps$indiv <- as.numeric(as.factor(dps$id))
### Order for correct indexing
dps <- dps[order(dps$spplot, dps$indiv, dps$census),]
### GET AND SCALE SPECIES MEAN TRAIT VALUES AND AND INTRASPECIFIC SD'S...
wd.mean <- as.vector(traits$WD.mean[match(unique(dps$spplot), traits$sp)])
wd.sd <- as.vector(traits$WD.sd[match(unique(dps$spplot), traits$sp)])
wd.mean.z <- as.vector(scale(wd.mean))
wd.sp.sd <- sd(wd.mean, na.rm=T)
wd.sd.z <- wd.sd / wd.sp.sd
wd.sd.z[is.na(wd.sd.z)] <- mean(wd.sd.z, na.rm=T)
wd.tau.z <- 1/(wd.sd.z^2)
wd.mean.z[is.na(wd.mean.z)] <- rep(0, length(wd.mean.z[is.na(wd.mean.z)]))
lma.mean <- as.vector(traits$log.LMA.mean[match(unique(dps$spplot), traits$sp)])
lma.sd <- as.vector(traits$log.LMA.sd[match(unique(dps$spplot), traits$sp)])
lma.mean.z <- as.vector(scale(lma.mean))
lma.sp.sd <- sd(lma.mean, na.rm=T)
lma.sd.z <- lma.sd / lma.sp.sd
lma.sd.z[is.na(lma.sd.z)] <- mean(lma.sd.z, na.rm=T)
lma.tau.z <- 1/(lma.sd.z^2)
lma.mean.z[is.na(lma.mean.z)] <- rep(0, length(lma.mean.z[is.na(lma.mean.z)]))
wd.sp.tau <- 1/(wd.sp.sd^2)
lma.sp.tau <- 1/(lma.sp.sd^2)
tcor <- cor(wd.mean.z, lma.mean.z)
wd.sd[is.na(wd.sd)] <- mean(wd.sd[!is.na(wd.sd)])
lma.sd[is.na(lma.sd)] <- mean(lma.sd[!is.na(lma.sd)])
wd.tau <- 1/(wd.sd^2)
lma.tau <- 1/(lma.sd^2)
tmeans <- cbind(wd.mean, lma.mean)
colnames(tmeans) <- NULL
tmeans.z <- cbind(wd.mean.z, lma.mean.z)
colnames(tmeans.z) <- NULL
ttaus.z <- cbind(wd.tau.z, lma.tau.z)
colnames(ttaus.z) <- NULL
omega <- matrix(nrow=2, ncol=2, data=c(wd.sp.tau, tcor, tcor, lma.sp.tau))
omegas <- list()
for(i in 1:length(wd.mean.z)){
omegas[[i]] <- matrix(ncol=2,nrow=2,data=c(wd.tau[i],#wd.tau.z[i],
tcor, tcor,
lma.tau[i]))#lma.tau.z[i]))
}
omegas <- array(unlist(omegas), dim=c(2,2,length(omegas)))
data = list (
N = nrow(dps),
tree = dps$indiv,
n.tree = length(unique(dps$indiv)),
n.sp = length(unique(dps$spplot)),
sp = as.numeric(as.factor(dps$spplot)),
#  obs.growth = as.numeric(dps$growth),
obs.growth = as.numeric(dps$RGR.z),
days = dps$days/365,
log.nci = as.numeric(dps[,'log.all.nci.zall']),
#  log.nci = as.numeric(dps[,'log.all.nci.z']),
#  log.nci = as.numeric(dps[,'log.all.size.nci.zall']),
dbh = as.vector(dps$dbh),
#  log.dbh = dps$log.dbh.zall,
log.dbh = dps$log.dbh.z,
tmeans.z = tmeans.z,
omegas = omegas
)
### Add an indicator to set individual effect of non-rep indiv to zero
if(p!=2){
repindiv <- names(table(data$tree))[table(data$tree) > 1]
data$indicator <- as.numeric(data$tree %in% repindiv)
}
setwd("K:/Bob/Panama/GIT/Panama_Analysis/MODELS")
sink("Growth_Model_noITV_2.9.17_error.bug")
cat(" model {
for (i in 1:N){
obs.growth[i] ~ dnormmix(mu[1:2, i], m.tau[1:2, i], f)
mu[1,i] <- true.growth[i]
mu[2,i] <- true.growth[i]
sd1[i] <- (0.927 + 0.0038 * (dbh[i] + 15)) * 1.414 / days[i]
sd2[i] <- 25.6 * 1.414 / days[i]
m.tau[1,i] <- pow(sd1[i], -2)
m.tau[2,i] <- pow(sd2[i], -2)
true.growth[i] <- exp(true.log.growth[i])
true.log.growth[i] ~ dnorm(predict.log.growth[i], tau[1])
predict.log.growth[i] <- b0[sp[i]]
+ b1[sp[i]] * log.nci[i]
+ b2[sp[i]] * log.dbh[i]
+ indiv.effect[tree[i]] * indicator[i]
}
for( j in 1:n.sp ) {
b0[j] ~ dnorm(mu.beta[1] + (beta.wd[1] * tmeans.z[j,1]) + (beta.lma[1] * tmeans.z[j,2]), tau[2])
b1[j] ~ dnorm(mu.beta[2] + (beta.wd[2] * tmeans.z[j,1]) + (beta.lma[2] * tmeans.z[j,2]), tau[3])
b2[j] ~ dnorm(mu.beta[3], tau[4])
}
### prior and random effect ##########
f[1] <- 0.9724
f[2] <- 0.0276
for( i.a in 1:n.tree ) {
indiv.effect[i.a] ~ dnorm(0, tau[5])
}
for( t in 1:5 ) {
tau[t] ~ dgamma(1E-3, 1E-3)
}
for( m in 1:3 ) {
mu.beta[m] ~ dnorm(0, 1E-3)
}
for( b in 1:2 ) {
beta.wd[b] ~ dnorm(0, 1E-3)
beta.lma[b] ~ dnorm(0, 1E-3)
}
}"
, fill=TRUE)
sink()
params <- c('mu.beta','beta.wd','beta.lma')
warning(paste("Now working on:", paste(ifelse(p==1,'Cocoli',ifelse(p==2,'BCI','Sherman')), ifelse(size==1,'< 10cm','> 10cm'),sep=" ")), immediate. = T)
mod <- run.jags(model='K:/Bob/Panama/GIT/Panama_Analysis/MODELS/Growth_Model_noITV_2.9.17_error.bug',
monitor=params, data=data, n.chains=3,
burnin=5000, sample=1000, adapt=1000, modules=c('glm'),
thin=3, method='parallel')
mod <- run.jags(model='K:/Bob/Panama/GIT/Panama_Analysis/MODELS/Growth_Model_noITV_2.9.17_error.bug',
monitor=params, data=data, n.chains=3,
burnin=5000, sample=1000, adapt=1000, modules=c('glm','mix'),
thin=3, method='parallel')
mod <- run.jags(model='K:/Bob/Panama/GIT/Panama_Analysis/MODELS/Growth_Model_noITV_2.9.17_error.bug',
monitor=params, data=data, n.chains=3,
burnin=3000, sample=1000, adapt=1000, modules=c('glm','mix'),
factories='mix::TemperedMix sampler off', thin=3, method='parallel')
mod
data = list (
N = nrow(dps),
tree = dps$indiv,
n.tree = length(unique(dps$indiv)),
n.sp = length(unique(dps$spplot)),
sp = as.numeric(as.factor(dps$spplot)),
#  obs.growth = as.numeric(dps$growth),
obs.growth = as.numeric(dps$RGR.z),
days = dps$days/365,
#  log.nci = as.numeric(dps[,'log.all.nci.zall']),
#  log.nci = as.numeric(dps[,'log.all.nci.z']),
log.nci = as.numeric(dps[,'log.all.size.nci.zall']),
dbh = as.vector(dps$dbh),
#  log.dbh = dps$log.dbh.zall,
log.dbh = dps$log.dbh.z,
tmeans.z = tmeans.z,
omegas = omegas
)
### Add an indicator to set individual effect of non-rep indiv to zero
if(p!=2){
repindiv <- names(table(data$tree))[table(data$tree) > 1]
data$indicator <- as.numeric(data$tree %in% repindiv)
}
mod <- run.jags(model='K:/Bob/Panama/GIT/Panama_Analysis/MODELS/Growth_Model_noITV_2.9.17_error.bug',
monitor=params, data=data, n.chains=3,
burnin=2000, sample=7500, adapt=500, modules=c('glm','mix'),
factories='mix::TemperedMix sampler off', thin=3, method='parallel')
mod <- run.jags(model='K:/Bob/Panama/GIT/Panama_Analysis/MODELS/Growth_Model_noITV_2.9.17_error.bug',
monitor=params, data=data, n.chains=3,
burnin=2000, sample=750, adapt=500, modules=c('glm','mix'),
factories='mix::TemperedMix sampler off', thin=3, method='parallel')
mod
?rstan
