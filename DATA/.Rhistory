list.files()
load('coc.sm.Rdata')
list.files()
load('coc.lg.Rdata')
mod
mod <- readRDS('coc.sm.RDS')
mod <- readRDS('coc.sm.RData')
mod
plot(mod)
plot(mod)
### Running on PC???
pc <- T
#######################################
###  START HERE WITH PROCESSED DATA ###
#######################################
if(pc==T) {
setwd('K:/Bob/Panama/GIT/Panama_analysis/DATA/')
load("Panama_AnalysisData_6.2.16.RDA") # tree data
load("panama_ITV_traits_6.2.16.RDA") # trait data
}
r <- 15
tdata$Not.Edge.20[tdata$plot==1] <- point.in.polygon(tdata$x[tdata$plot==1], tdata$y[tdata$plot==1],
c(r,(200-r),(200-r),(100-r),(100-r),r),
c(r,r,(100-r),(100-r),(300-r),(300-r)))
tdata$Not.Edge.20[tdata$plot==1] <- ifelse(tdata$Not.Edge.20[tdata$plot==1] > 0, 1, 0)
tdata$Not.Edge.20[tdata$plot==2] <- ifelse(tdata$x[tdata$plot==2] > r & tdata$x[tdata$plot==2] < (1000-r)
& tdata$y[tdata$plot==2] > r & tdata$y[tdata$plot==2] < (500-r), 1, 0)
tdata$Not.Edge.20[tdata$plot==3] <- point.in.polygon(tdata$x[tdata$plot==3], tdata$y[tdata$plot==3],
c(r,(140-r),(140-r),(240-r),(240-r),(140+r),(140+r),r),
c(r,r,(40+r),(40+r),(340-r),(340-r),(140-r),(140-r)))
tdata$Not.Edge.20[tdata$plot==3] <- ifelse(tdata$Not.Edge.20[tdata$plot==3] > 0, 1, 0)
tdata <- tdata[tdata$Not.Edge.20==1,]
tdata <- droplevels(tdata)
tdata$log.all.nci <- log(tdata$All.NCI + 1)
tdata$log.con.nci <- log(tdata$Con.NCI + 1)
tdata$log.dbh <- log(tdata$dbh)
traits$log.LMA.mean <- log(traits$LMA.mean)
###########################
tdata <- tdata[tdata$Growth.Include.3 == TRUE,]
tdata <- tdata[tdata$growth > (-75),]
d <- tdata
d <- droplevels(d)
p <- 1
dp <- d[d$plot==p,]
cutoff <- (100)  # Setting cutoff to neg value will put everything in 1 size class.
dp$size.class <- ifelse(dp$dbh <= cutoff, 1, 2)
### Center / scale other variables within size class
for (i in 1:2){
dp$log.dbh.z[dp$size.class %in% i] <- as.vector(scale(dp$log.dbh[dp$size.class %in% i]))
dp$log.all.nci.z[dp$size.class %in% i] <- as.vector(scale(dp$log.all.nci[dp$size.class %in% i]))
dp$log.con.nci.z[dp$size.class %in% i] <- as.vector(scale(dp$log.con.nci[dp$size.class %in% i]))
dp$growth.z[dp$size.class %in% i] <- as.vector(scale(dp$growth[dp$size.class %in% i], center=F))
}
size <- 1
dps <- dp[dp$size.class %in% size,]
dps <- dps[,c('spplot','plot','census','growth.z',
'log.dbh.z','id','log.all.nci.z','log.con.nci.z')]
dim(dps)
dps <- droplevels(dps)
dps$indiv <- as.numeric(as.factor(dps$id))
# Order for correct indexing
dps <- dps[order(dps$spplot, dps$indiv, dps$census),]
### GET AND SCALE SPECIES MEAN TRAIT VALUES AND AND INTRASPECIFIC SD'S...
wd.mean <- as.vector(traits$WD.mean[match(unique(dps$spplot), traits$sp)])
wd.sd <- as.vector(traits$WD.sd[match(unique(dps$spplot), traits$sp)])
wd.mean.z <- as.vector(scale(wd.mean))
wd.sp.sd <- sd(wd.mean, na.rm=T)
wd.sd.z <- wd.sd / wd.sp.sd
wd.sd.z[is.na(wd.sd.z)] <- mean(wd.sd.z, na.rm=T)
wd.tau.z <- 1/(wd.sd.z^2)
wd.mean.z[is.na(wd.mean.z)] <- rep(0, length(wd.mean.z[is.na(wd.mean.z)]))
lma.mean <- as.vector(traits$log.LMA.mean[match(unique(dps$spplot), traits$sp)])
lma.sd <- as.vector(traits$log.LMA.sd[match(unique(dps$spplot), traits$sp)])
lma.mean.z <- as.vector(scale(lma.mean))
lma.sp.sd <- sd(lma.mean, na.rm=T)
lma.sd.z <- lma.sd / lma.sp.sd
lma.sd.z[is.na(lma.sd.z)] <- mean(lma.sd.z, na.rm=T)
lma.tau.z <- 1/(lma.sd.z^2)
lma.mean.z[is.na(lma.mean.z)] <- rep(0, length(lma.mean.z[is.na(lma.mean.z)]))
wd.sp.tau <- 1/(wd.sp.sd^2)
lma.sp.tau <- 1/(lma.sp.sd^2)
tcor <- cor(wd.mean.z, lma.mean.z)
omega <- matrix(nrow=2, ncol=2, data=c(wd.sp.tau, tcor, tcor, lma.sp.tau))
tmeans.z <- cbind(wd.mean.z, lma.mean.z)
colnames(tmeans.z) <- NULL
ttaus.z <- cbind(wd.tau.z, lma.tau.z)
colnames(ttaus.z) <- NULL
ttaus.z
tmeans.z
data = list (
ntree = nrow(dps),
nindiv = length(unique(dps$id)),
indiv = dps$indiv,
nspecies = length(unique(dps$spplot)),
species = as.numeric(as.factor(dps$spplot)),
growth = as.numeric(dps$growth.z),
allnci = as.numeric(dps[,'log.all.nci.z']),
dbh = as.numeric(dps$log.dbh.z),
tmeans.z = tmeans.z,
ttaus.z = ttaus.z,
omega = omega
)
#################################
data = list (
ntree = nrow(dps),
nindiv = length(unique(dps$id)),
indiv = dps$indiv,
nspecies = length(unique(dps$spplot)),
species = as.numeric(as.factor(dps$spplot)),
growth = as.numeric(dps$growth.z),
allnci = as.numeric(dps[,'log.all.nci.z']),
dbh = as.numeric(dps$log.dbh.z),
tmeans.z = tmeans.z,
ttaus.z = ttaus.z,
omega = omega
)
### Add an indicator to set individual effect of non-rep indiv to zero
if(p!=2){
repindiv <- names(table(data$indiv))[table(data$indiv) > 1]
data$indicator <- as.numeric(data$indiv %in% repindiv)
}
lapply(data, head)
sink("growth_6.2.16_coc.she.bug")
cat(" model {
for( i in 1:ntree ) {
growth[i] ~ dnorm(mu[i], tau[1])
mu[i] <- beta.1[species[i]]
+ beta.2[species[i]] * allnci[i]
+ beta.3[species[i]] * dbh[i]
+ indiv.effect[indiv[i]] * indicator[i]
}
for( j in 1:nspecies ) {
### MULTIVARIATE TRAITS ###
beta.1[j] ~ dnorm(mu.beta[1] + (beta.wd[1] * t.pred[j,1]) + (beta.lma[1] * t.pred[j,2]), tau[2])
beta.2[j] ~ dnorm(mu.beta[2] + (beta.wd[2] * t.pred[j,1]) + (beta.lma[2] * t.pred[j,2]), tau[3])
beta.3[j] ~ dnorm(mu.beta[3], tau[4])
### TURN OFF ITV
#           wd.pred[j] <- wd.mean.z[j]
#           lma.pred[j] <- lma.mean.z[j]
### TURN ON ITV (v1) ###
#              for (N in 1:2){ t.pred[j,N] ~ dnorm(tmeans.z[j,N], ttaus.z[j,N]) }
### TURN ON ITV (v2) ###
#             t.pred[j,1:2] ~ dmnorm(tmeans.z[j,], omega[,])
### TURN ON ITV (v3) ###
t.pred[j,1:2] ~ dmnorm(pred.tmeans[j,], omega[,])
for (N in 1:2){
pred.tmeans[j,N] ~ dnorm(tmeans.z[j,N], pred.tau[j,N])
pred.tau[j,N] ~ dgamma(sh[j,2], ra[j,N])
ra[j,N] <- (ttaus.z[j,N] + sqrt(ttaus.z[j,N]^2 + 4*sd[N]^2))/(2*sd[N]^2)
sh[j,N] <- (1 + ttaus.z[j,N]*ra[j,N])
}
}
### PRIORS ####
for( m in 1:3 ) {
mu.beta[m] ~ dnorm(0, 1E-3)
}
for( b in 1:2 ) {
beta.wd[b] ~ dnorm(0, 1E-3)
beta.lma[b] ~ dnorm(0, 1E-3)
sd[b] ~ dunif(0, 100)
}
for( i.a in 1:nindiv ) {
indiv.effect[i.a] ~ dnorm(0, tau[5])
}
for( t in 1:5 ) {
tau[t] ~ dgamma(1E-3, 1E-3)
}
sigma <- 1 / sqrt(tau)
pred.sigma <- 1 / sqrt(pred.tau)
}"
, fill=TRUE)
sink()
if(p==2){inits <- function (){
list(
beta.wd = rnorm(2),
beta.lma = rnorm(2),
mu.beta = rnorm(3),
sd = runif(2, 0, 100),
tau = rgamma(4, 1E3, 1E3))
}}
if(p!=2){inits <- function (){
list(
beta.wd = rnorm(2),
beta.lma = rnorm(2),
mu.beta = rnorm(3),
sd = runif(2, 0, 100),
tau = rgamma(5, 1E3, 1E3))
}}
inits()
params <- c('beta.wd','beta.lma','mu.beta','sigma') #,'pred.sigma','t.pred','pred.tmeans')
adapt <- 5000
iter <- 25000
burn <- 20000
thin <- 25
chains <- 3
modfile <- ifelse(p!=2, "growth_6.2.16_coc.she.bug", "growth_6.2.16_bci.bug")
modfile
print(paste("Now working on:", paste(ifelse(p==1,'Cocoli',ifelse(p==2,'BCI','Sherman')), ifelse(size==1,'<10cm','>10cm'),sep=" ")))
warning(paste("Now working on:", paste(ifelse(p==1,'Cocoli',ifelse(p==2,'BCI','Sherman')), ifelse(size==1,'<10cm','>10cm'),sep=" ")))
mod <- jagsUI::jags(data, inits, params, modfile, n.chains=chains, n.adapt=adapt,
n.iter=iter, n.burnin=burn, n.thin=thin, parallel=T)
mod
#######################################
###  GROWTH ANALYSIS
###  SINGLE-PLOT
###  ONLY NCI, DBH BY SIZE CLASS
###  Results in "K:/Bob/Panama/RESULTS/_6.6.16/growth"
#######################################
library(jagsUI)
library(rjags)
library(sp)
### Running on PC???
pc <- T
#######################################
###  START HERE WITH PROCESSED DATA ###
#######################################
if(pc==T) {
setwd('K:/Bob/Panama/GIT/Panama_analysis/DATA/')
load("Panama_AnalysisData_6.2.16.RDA") # tree data
load("panama_ITV_traits_6.2.16.RDA") # trait data
}
r <- 15
tdata$Not.Edge.20[tdata$plot==1] <- point.in.polygon(tdata$x[tdata$plot==1], tdata$y[tdata$plot==1],
c(r,(200-r),(200-r),(100-r),(100-r),r),
c(r,r,(100-r),(100-r),(300-r),(300-r)))
tdata$Not.Edge.20[tdata$plot==1] <- ifelse(tdata$Not.Edge.20[tdata$plot==1] > 0, 1, 0)
tdata$Not.Edge.20[tdata$plot==2] <- ifelse(tdata$x[tdata$plot==2] > r & tdata$x[tdata$plot==2] < (1000-r)
& tdata$y[tdata$plot==2] > r & tdata$y[tdata$plot==2] < (500-r), 1, 0)
tdata$Not.Edge.20[tdata$plot==3] <- point.in.polygon(tdata$x[tdata$plot==3], tdata$y[tdata$plot==3],
c(r,(140-r),(140-r),(240-r),(240-r),(140+r),(140+r),r),
c(r,r,(40+r),(40+r),(340-r),(340-r),(140-r),(140-r)))
tdata$Not.Edge.20[tdata$plot==3] <- ifelse(tdata$Not.Edge.20[tdata$plot==3] > 0, 1, 0)
tdata <- tdata[tdata$Not.Edge.20==1,]
tdata <- droplevels(tdata)
tdata$log.all.nci <- log(tdata$All.NCI + 1)
tdata$log.con.nci <- log(tdata$Con.NCI + 1)
tdata$log.dbh <- log(tdata$dbh)
traits$log.LMA.mean <- log(traits$LMA.mean)
###########################
###########################
#### Prepare data for input  ####
###########################
tdata <- tdata[tdata$Growth.Include.3 == TRUE,]
tdata <- tdata[tdata$growth > (-75),]
#####################
#### Start Loop  ####
#####################
# Drop species with NA for both traits
d <- tdata
d <- droplevels(d)
##################################################
#### Start loop to model each plot separately ####
##################################################
p <- 1
#for(p in c(1,3)){
dp <- d[d$plot==p,]
######################################################################################
#### Standardize and Center coefficients (within plots, within size classes 10cm) ####
######################################################################################
###### Generic size class: Center / scale DBH within species, within size class #####
cutoff <- (100)  # Setting cutoff to neg value will put everything in 1 size class.
dp$size.class <- ifelse(dp$dbh <= cutoff, 1, 2)
### Center / scale other variables within size class
for (i in 1:2){
dp$log.dbh.z[dp$size.class %in% i] <- as.vector(scale(dp$log.dbh[dp$size.class %in% i]))
dp$log.all.nci.z[dp$size.class %in% i] <- as.vector(scale(dp$log.all.nci[dp$size.class %in% i]))
dp$log.con.nci.z[dp$size.class %in% i] <- as.vector(scale(dp$log.con.nci[dp$size.class %in% i]))
dp$growth.z[dp$size.class %in% i] <- as.vector(scale(dp$growth[dp$size.class %in% i], center=F))
}
#size <- 1
for(size in 1:2) {
dps <- dp[dp$size.class %in% size,]
dps <- dps[,c('spplot','plot','census','growth.z',
'log.dbh.z','id','log.all.nci.z','log.con.nci.z')]
# Create an individual ID
dps <- droplevels(dps)
dps$indiv <- as.numeric(as.factor(dps$id))
# Order for correct indexing
dps <- dps[order(dps$spplot, dps$indiv, dps$census),]
### GET AND SCALE SPECIES MEAN TRAIT VALUES AND AND INTRASPECIFIC SD'S...
wd.mean <- as.vector(traits$WD.mean[match(unique(dps$spplot), traits$sp)])
wd.sd <- as.vector(traits$WD.sd[match(unique(dps$spplot), traits$sp)])
wd.mean.z <- as.vector(scale(wd.mean))
wd.sp.sd <- sd(wd.mean, na.rm=T)
wd.sd.z <- wd.sd / wd.sp.sd
wd.sd.z[is.na(wd.sd.z)] <- mean(wd.sd.z, na.rm=T)
wd.tau.z <- 1/(wd.sd.z^2)
wd.mean.z[is.na(wd.mean.z)] <- rep(0, length(wd.mean.z[is.na(wd.mean.z)]))
lma.mean <- as.vector(traits$log.LMA.mean[match(unique(dps$spplot), traits$sp)])
lma.sd <- as.vector(traits$log.LMA.sd[match(unique(dps$spplot), traits$sp)])
lma.mean.z <- as.vector(scale(lma.mean))
lma.sp.sd <- sd(lma.mean, na.rm=T)
lma.sd.z <- lma.sd / lma.sp.sd
lma.sd.z[is.na(lma.sd.z)] <- mean(lma.sd.z, na.rm=T)
lma.tau.z <- 1/(lma.sd.z^2)
lma.mean.z[is.na(lma.mean.z)] <- rep(0, length(lma.mean.z[is.na(lma.mean.z)]))
wd.sp.tau <- 1/(wd.sp.sd^2)
lma.sp.tau <- 1/(lma.sp.sd^2)
tcor <- cor(wd.mean.z, lma.mean.z)
omega <- matrix(nrow=2, ncol=2, data=c(wd.sp.tau, tcor, tcor, lma.sp.tau))
tmeans.z <- cbind(wd.mean.z, lma.mean.z)
colnames(tmeans.z) <- NULL
ttaus.z <- cbind(wd.tau.z, lma.tau.z)
colnames(ttaus.z) <- NULL
#################################
#### Organize the input data ####
#################################
data = list (
ntree = nrow(dps),
nindiv = length(unique(dps$id)),
indiv = dps$indiv,
nspecies = length(unique(dps$spplot)),
species = as.numeric(as.factor(dps$spplot)),
growth = as.numeric(dps$growth.z),
allnci = as.numeric(dps[,'log.all.nci.z']),
dbh = as.numeric(dps$log.dbh.z),
tmeans.z = tmeans.z,
ttaus.z = ttaus.z,
omega = omega
)
### Add an indicator to set individual effect of non-rep indiv to zero
if(p!=2){
repindiv <- names(table(data$indiv))[table(data$indiv) > 1]
data$indicator <- as.numeric(data$indiv %in% repindiv)
}
##############################
#### Write the model file ####
##############################
setwd("K:/Bob/Panama/MODELS")
sink("growth_6.2.16_bci.bug")
cat(" model {
for( i in 1:ntree ) {
growth[i] ~ dnorm(mu[i], tau[1])
mu[i] <- beta.1[species[i]]
+ beta.2[species[i]] * allnci[i]
+ beta.3[species[i]] * dbh[i]
}
for( j in 1:nspecies ) {
beta.1[j] ~ dnorm(mu.beta[1] + (beta.wd[1] * t.pred[j,1]) + (beta.lma[1] * t.pred[j,2]), tau[2])
beta.2[j] ~ dnorm(mu.beta[2] + (beta.wd[2] * t.pred[j,1]) + (beta.lma[2] * t.pred[j,2]), tau[3])
beta.3[j] ~ dnorm(mu.beta[3], tau[4])
t.pred[j,1:2] ~ dmnorm(pred.tmeans[j,], omega[,])
for (N in 1:2){
pred.tmeans[j,N] ~ dnorm(tmeans.z[j,N], pred.tau[j,N])
pred.tau[j,N] ~ dgamma(sh[j,2], ra[j,N])
ra[j,N] <- (ttaus.z[j,N] + sqrt(ttaus.z[j,N]^2 + 4*sd[N]^2))/(2*sd[N]^2)
sh[j,N] <- (1 + ttaus.z[j,N]*ra[j,N])
}
}
for( m in 1:3 ) {
mu.beta[m] ~ dnorm(0, 1E-3)
}
for( b in 1:2 ) {
beta.wd[b] ~ dnorm(0, 1E-3)
beta.lma[b] ~ dnorm(0, 1E-3)
sd[b] ~ dunif(0, 100)
}
for( t in 1:4 ) {
tau[t] ~ dgamma(1E-3, 1E-3)
}
sigma <- 1 / sqrt(tau)
pred.sigma <- 1 / sqrt(pred.tau)
}"
, fill=TRUE)
sink()
sink("growth_6.2.16_coc.she.bug")
cat(" model {
for( i in 1:ntree ) {
growth[i] ~ dnorm(mu[i], tau[1])
mu[i] <- beta.1[species[i]]
+ beta.2[species[i]] * allnci[i]
+ beta.3[species[i]] * dbh[i]
+ indiv.effect[indiv[i]] * indicator[i]
}
for( j in 1:nspecies ) {
### MULTIVARIATE TRAITS ###
beta.1[j] ~ dnorm(mu.beta[1] + (beta.wd[1] * t.pred[j,1]) + (beta.lma[1] * t.pred[j,2]), tau[2])
beta.2[j] ~ dnorm(mu.beta[2] + (beta.wd[2] * t.pred[j,1]) + (beta.lma[2] * t.pred[j,2]), tau[3])
beta.3[j] ~ dnorm(mu.beta[3], tau[4])
### TURN OFF ITV
#           wd.pred[j] <- wd.mean.z[j]
#           lma.pred[j] <- lma.mean.z[j]
### TURN ON ITV (v1) ###
#              for (N in 1:2){ t.pred[j,N] ~ dnorm(tmeans.z[j,N], ttaus.z[j,N]) }
### TURN ON ITV (v2) ###
#             t.pred[j,1:2] ~ dmnorm(tmeans.z[j,], omega[,])
### TURN ON ITV (v3) ###
t.pred[j,1:2] ~ dmnorm(pred.tmeans[j,], omega[,])
for (N in 1:2){
pred.tmeans[j,N] ~ dnorm(tmeans.z[j,N], pred.tau[j,N])
pred.tau[j,N] ~ dgamma(sh[j,2], ra[j,N])
ra[j,N] <- (ttaus.z[j,N] + sqrt(ttaus.z[j,N]^2 + 4*sd[N]^2))/(2*sd[N]^2)
sh[j,N] <- (1 + ttaus.z[j,N]*ra[j,N])
}
}
### PRIORS ####
for( m in 1:3 ) {
mu.beta[m] ~ dnorm(0, 1E-3)
}
for( b in 1:2 ) {
beta.wd[b] ~ dnorm(0, 1E-3)
beta.lma[b] ~ dnorm(0, 1E-3)
sd[b] ~ dunif(0, 100)
}
for( i.a in 1:nindiv ) {
indiv.effect[i.a] ~ dnorm(0, tau[5])
}
for( t in 1:5 ) {
tau[t] ~ dgamma(1E-3, 1E-3)
}
sigma <- 1 / sqrt(tau)
pred.sigma <- 1 / sqrt(pred.tau)
}"
, fill=TRUE)
sink()
################################################
### Set initial values, monitors, iterations and run model ###
################################################
if(p==2){inits <- function (){
list(
beta.wd = rnorm(2),
beta.lma = rnorm(2),
mu.beta = rnorm(3),
sd = runif(2, 0, 100),
tau = rgamma(4, 1E3, 1E3))
}}
if(p!=2){inits <- function (){
list(
beta.wd = rnorm(2),
beta.lma = rnorm(2),
mu.beta = rnorm(3),
sd = runif(2, 0, 100),
tau = rgamma(5, 1E3, 1E3))
}}
# Set monitors & run model
params <- c('beta.wd','beta.lma','mu.beta','sigma') #,'pred.sigma','t.pred','pred.tmeans')
adapt <- 5000
iter <- 50000
burn <- 45000
thin <- 25
chains <- 3
modfile <- ifelse(p!=2, "growth_6.2.16_coc.she.bug", "growth_6.2.16_bci.bug")
warning(paste("Now working on:", paste(ifelse(p==1,'Cocoli',ifelse(p==2,'BCI','Sherman')), ifelse(size==1,'<10cm','>10cm'),sep=" ")))
mod <- jagsUI::jags(data, inits, params, modfile, n.chains=chains, n.adapt=adapt,
n.iter=iter, n.burnin=burn, n.thin=thin, parallel=T)
for(reps in 1:20){
if(max(unlist(mod$Rhat)) > 1.1){
print(paste('Doing update #', reps))
mod <- update(mod, n.iter=10000)
}
}
setwd("K:/Bob/Panama/RESULTS/_6.6.16/growth")
file <- paste(ifelse(p==1,'coc',ifelse(p==2,'bci','she')), ifelse(size==1,'sm','lg'), 'Rdata',sep=".")
saveRDS(mod, file=file)
dfile <- paste(ifelse(p==1,'coc',ifelse(p==2,'bci','she')), ifelse(size==1,'sm','lg'), 'Input.Rdata',sep=".")
saveRDS(data, file=dfile)
}
#}
plot.params <- function(mod){
x <- cbind(unlist(mod$q2.5), unlist(mod$q50), unlist(mod$q97.5))
x <- x[-grep('deviance', rownames(x)),]
x <- x[-grep('sigma', rownames(x)),]
bg <- ifelse(sign(x[,1]) == sign(x[,3]), 1, 'white')
plot(x[,2], axes=F, ylim=range(x), xlab='', pch=21, bg=bg, cex=2)
arrows(1:nrow(x), x[,1], 1:nrow(x), x[,3], len=0.1, code=3, angle=90)
abline(h=0, lty=2)
points(x[,2], pch=21, bg=bg, cex=2)
axis(1, labels=rownames(x), at=1:nrow(x), las=2)
axis(2); box()
}
plot.params.2 <- function(mod){
x <- cbind(unlist(mod$q2.5), unlist(mod$q50), unlist(mod$q97.5))
x <- x[-grep('deviance', rownames(x)),]
x <- x[-grep('sigma', rownames(x)),]
#   x <- x[-grep('pred', rownames(x)),]
#   x <- x[-grep('wd.mu', rownames(x)),]
#   x <- x[-grep('lma.mu', rownames(x)),]
bg <- ifelse(sign(x[,1]) == sign(x[,3]), 1, 'white')
plot(x[,2], axes=F, ylim=range(x), xlab='', pch=21, bg=bg, cex=2)
arrows(1:nrow(x), x[,1], 1:nrow(x), x[,3], len=0.1, code=3, angle=90)
abline(h=0, lty=2)
points(x[,2], pch=21, bg=bg, cex=2)
axis(1, labels=rownames(x), at=1:nrow(x), las=2)
axis(2); box()
}
mod
plot(mod)
mod <- readRDS('coc.lg.RData')
plot(mod)
mod <- readRDS('coc.sm.RData')
mod
plot(mod)
plot.params.2(mod)
getwd()
setwd("K:/Bob/Panama/GIT)
setwd("K:/Bob/Panama/GIT")
setwd("K:/Bob/Panama/GIT/Panama_analysis/DATA")
list.files()
load('NCI_for_panama_traits_preNCI_6.1.16.RDA')
dim(nci)
load('panama_traits_preNCI_6.1.16.RDA')
dim(tdata)
head(tdata)
id <- paste(tdata$plot, tdata$id)
head(id)
id <- paste(tdata$id, tdata$plot)
head(sort(id))
id <- paste(tdata$id, tdata$plot, tdata$latin, tdata$x, tdata$y)
nci2 <- cbind(nci, id)
head(nci2)
save("NCI_for_panama_traits_preNCI_6.1.16_REVISED.RDA")
save(nci2, file="NCI_for_panama_traits_preNCI_6.1.16_REVISED.RDA")
