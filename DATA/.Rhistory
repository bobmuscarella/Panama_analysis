bci4$DBH2 <- bci5$DBH[match(bci4$match, bci5$match)]
bci4$Status2 <- bci5$Status[match(bci4$match, bci5$match)]
bci4$Date2 <- bci5$Date[match(bci4$match, bci5$match)]
bci4$DBH3 <- bci5$DBH[match(bci4$matchdeads, bci5$matchdeads)]
bci4$Status3 <- bci5$Status[match(bci4$matchdeads, bci5$matchdeads)]
bci4$DateFinal <- bci5$Date[match(bci4$matchdeads, bci5$matchdeads)]
bci4$StatusStart <- bci4$Status
bci4$StatusFinal <- ifelse(!is.na(bci4$DBH2), bci4$Status2, bci4$Status3)
bci4$StatusFinal <- ifelse(bci4$StatusFinal == 1, 'alive', ifelse(bci4$StatusFinal == 2, 'dead', NA))
bci4$dbhStart <- bci4$DBH
bci4$dbhFinal <- bci4$DBH2
# Remove cases where ambiguous DBHs were assigned (emerging from multi HOM strangeness)
bci4 <- bci4[bci4$DBH2==bci4$DBH3 | is.na(bci4$DBH2) | is.na(bci4$DBH3),]
bci4$survival <- ifelse(bci4$StatusFinal == 'alive', 1, 0)
bci4$days <- as.numeric(bci4$DateFinal - bci4$Date)
bci4$growth <- ((bci4$dbhFinal - bci4$dbhStart)/bci4$days) * 365
bci4$log.growth <- ((log(bci4$dbhFinal) - log(bci4$dbhStart))/(bci4$days)) * 365
dim(bci4)
dim(bci)
head(bci)
sum(bci$stemID==1)
setwd('/Users/Bob/Downloads')
load("bci.full.Rdata31Aug2012/bci.full4.rdata")
load("bci.full.Rdata31Aug2012/bci.stem5.rdata")
load("bci.full.Rdata31Aug2012/bci.full5.rdata")
bci.full4$growth <- round(365.25 * (bci.full5$dbh-bci.full4$dbh) / (bci.full5$date-bci.full4$date), 2)
bci.full4$growth <- ifelse(bci.full4$hom != bci.full5$hom, NA, bci.full4$growth)
bci.full4$survive <- ifelse(bci.full4$DFstatus == 'alive' & bci.full5$DFstatus != 'alive', 0,
ifelse(bci.full4$DFstatus == 'alive' & bci.full5$DFstatus == 'alive', 1, NA))
bci.full4$int <- (bci.full5$date - bci.full4$date)
setwd("/Users/Bob/Projects/Postdoc/Panama/DATA")
spcodes <- read.csv("bci/spcodes.csv")
bci.full4$spcode <- spcodes$spcode[match(bci.full4$sp, spcodes$Mnemonic)]
bci.full4$spcode[bci.full4$sp %in% 'swars1'] <- 'SWARS1'
bci.full4$spcode[bci.full4$sp %in% 'swars2'] <- 'SWARS1'
bci.full4$spcode[bci.full4$sp %in% 'protte'] <- 'PROTTE'
bci.full4$spcode[bci.full4$sp %in% 'quaras'] <- 'QUARAS'
bci <- bci.full4[!is.na(bci.full4$survive),]
bci$Not.edge <- ifelse(bci$gx > 20
& bci$gx < 980
& bci$gy > 20
& bci$gy < 480, 1, 0)
head(bci)
dim(bci)
dim(bci4)
setwd('/Users/Bob/Downloads')
load("bci.stem.Rdata31Aug2012/bci.stem4.rdata")
load("bci.full.Rdata31Aug2012/bci.full4.rdata")
load("bci.stem.Rdata31Aug2012/bci.stem5.rdata")
load("bci.full.Rdata31Aug2012/bci.full5.rdata")
bci.stem4$growth <- round(365.25 * (bci.stem5$dbh-bci.stem4$dbh) / (bci.stem5$date-bci.stem4$date), 2)
bci.stem4$growth <- ifelse(bci.stem4$hom != bci.stem5$hom, NA, bci.stem4$growth)
bci.stem4$survive <- ifelse(bci.stem4$DFstatus == 'alive' & bci.stem5$DFstatus != 'alive', 0,
ifelse(bci.stem4$DFstatus == 'alive' & bci.stem5$DFstatus == 'alive', 1, NA))
bci.stem4$int <- (bci.stem5$date - bci.stem4$date)
setwd("/Users/Bob/Projects/Postdoc/Panama/DATA")
spcodes <- read.csv("bci/spcodes.csv")
bci.stem4$spcode <- spcodes$spcode[match(bci.stem4$sp, spcodes$Mnemonic)]
bci.stem4$spcode[bci.stem4$sp %in% 'swars1'] <- 'SWARS1'
bci.stem4$spcode[bci.stem4$sp %in% 'swars2'] <- 'SWARS1'
bci.stem4$spcode[bci.stem4$sp %in% 'protte'] <- 'PROTTE'
bci.stem4$spcode[bci.stem4$sp %in% 'quaras'] <- 'QUARAS'
bci <- bci.stem4[!is.na(bci.stem4$survive),]
bci$Not.edge <- ifelse(bci$gx > 20
& bci$gx < 980
& bci$gy > 20
& bci$gy < 480, 1, 0)
dim(bci)
load("bci.full.Rdata31Aug2012/bci.full4.rdata")
load("bci.full.Rdata31Aug2012/bci.full5.rdata")
bci.full4$growth <- round(365.25 * (bci.full5$dbh-bci.full4$dbh) / (bci.full5$date-bci.full4$date), 2)
bci.full4$growth <- ifelse(bci.full4$hom != bci.full5$hom, NA, bci.full4$growth)
bci.full4$survive <- ifelse(bci.full4$DFstatus == 'alive' & bci.full5$DFstatus != 'alive', 0,
ifelse(bci.full4$DFstatus == 'alive' & bci.full5$DFstatus == 'alive', 1, NA))
bci.full4$int <- (bci.full5$date - bci.full4$date)
setwd("/Users/Bob/Projects/Postdoc/Panama/DATA")
spcodes <- read.csv("bci/spcodes.csv")
bci.full4$spcode <- spcodes$spcode[match(bci.full4$sp, spcodes$Mnemonic)]
bci.full4$spcode[bci.full4$sp %in% 'swars1'] <- 'SWARS1'
bci.full4$spcode[bci.full4$sp %in% 'swars2'] <- 'SWARS1'
bci.full4$spcode[bci.full4$sp %in% 'protte'] <- 'PROTTE'
bci.full4$spcode[bci.full4$sp %in% 'quaras'] <- 'QUARAS'
bci <- bci.full4[!is.na(bci.full4$survive),]
bci$Not.edge <- ifelse(bci$gx > 20
& bci$gx < 980
& bci$gy > 20
& bci$gy < 480, 1, 0)
bci.full4$spcode[grep(bci.full4$sp, 'swars')]
bci.full4$spcode[grep('swars', bci.full4$sp)]
setwd('/Users/Bob/Downloads')
load("bci.full.Rdata31Aug2012/bci.full4.rdata")
load("bci.full.Rdata31Aug2012/bci.full5.rdata")
bci.full4$growth <- round(365.25 * (bci.full5$dbh-bci.full4$dbh) / (bci.full5$date-bci.full4$date), 2)
bci.full4$growth <- ifelse(bci.full4$hom != bci.full5$hom, NA, bci.full4$growth)
bci.full4$survive <- ifelse(bci.full4$DFstatus == 'alive' & bci.full5$DFstatus != 'alive', 0,
ifelse(bci.full4$DFstatus == 'alive' & bci.full5$DFstatus == 'alive', 1, NA))
bci.full4$int <- (bci.full5$date - bci.full4$date)
setwd("/Users/Bob/Projects/Postdoc/Panama/DATA")
spcodes <- read.csv("bci/spcodes.csv")
bci.full4$spcode <- spcodes$spcode[match(bci.full4$sp, spcodes$Mnemonic)]
bci.full4$spcode[grep('swars', bci.full4$sp)]
bci.full4$spcode[grep('swars', bci.full4$sp)] <- 'SWARS1'
bci.full4$spcode[grep('swars', bci.full4$sp)]
bci.full4$spcode[bci.full4$sp %in% 'protte'] <- 'PROTTE'
bci.full4$spcode[bci.full4$sp %in% 'quaras'] <- 'QUARAS'
table(bci.full4$spcode)
bci <- bci.full4[!is.na(bci.full4$survive),]
dim(bci)
load(file='bci/bci_preNCI_12.9.15.RDA')
setwd("/Users/Bob/Projects/Postdoc/Panama/DATA")
load(file='bci/bci_preNCI_12.9.15.RDA')
head(bci)
dim(bci)
load("panama_NCI_Traits_12.9.15.RDA")
dim(tdata)
head(tdata)
head(tdata)
tdata <- tdata[tdata$plot != 'lfdp',]
tdata$growth[tdata$palm==T] <- NA
growth.include <- abs(tdata$growth) < sd(tdata$growth, na.rm=T) * 5
growth.include <- ifelse(is.na(growth.include), FALSE, growth.include)
tdata$Growth.Include <- growth.include
tdata$Growth.Include.2 <- ((tdata$growth > 4 * (-(0.0062 * tdata$dbh + 0.904))) & (tdata$growth < 75))
tdata$Growth.Include.2 <- ifelse(is.na(tdata$Growth.Include.2), FALSE, tdata$Growth.Include.2)
tdata$Growth.Include.3 <- (!is.na(tdata$growth) & (tdata$growth) < 75 & tdata$growth > (tdata$dbh * -0.25))
tdata <- tdata[tdata$Not.Edge %in% 1,]
tdata <- tdata[ ! tdata$survival %in% NA,]
tdata <- droplevels(tdata)
### Z-TRANSFORM DATA
z.score <- function (data) {
xm<- mean (data, na.rm=TRUE)
xsd<-sd(data, na.rm=TRUE)
xtrans<-(data-xm)/(2*xsd)
}
### Log-transform coefficients
# log the NCI metric
tdata$log.nci <- log(tdata$nci + 1)
# log the dbh
tdata$log.dbh <- log(tdata$dbh)
# log the tNCI and uNCI metrics
tdata$log.tnci.hmax <- log(tdata$tnci.hmax + 1)
tdata$log.unci.hmax <- log(tdata$unci.hmax + 1)
tdata$log.tnci.log.ldmc <- log(tdata$tnci.log.ldmc + 1)
tdata$log.unci.log.ldmc <- log(tdata$unci.log.ldmc + 1)
tdata$log.tnci.log.lma <- log(tdata$tnci.log.lma + 1)
tdata$log.unci.log.lma <- log(tdata$unci.log.lma + 1)
tdata$log.tnci.log.seed <- log(tdata$tnci.log.seed + 1)
tdata$log.unci.log.seed <- log(tdata$unci.log.seed + 1)
tdata$log.tnci.wsg <- log(tdata$tnci.wsg + 1)
tdata$log.unci.wsg <- log(tdata$unci.wsg + 1)
z.score <- function (data, scale=T, center=T) {
xm <- mean (data, na.rm=TRUE)
xsd <- sd(data, na.rm=TRUE)
if(center==T & scale==T){ xtrans <- (data - xm)/( 2 * xsd) }
if(center==F & scale==T){ xtrans <- (data)/( 2 * xsd) }
if(center==T & scale==F){ xtrans <- (data - xm) }
return(xtrans)
}
unlist(tapply(tdata$log.dbh, tdata$plot, z.score, scale=F))
tdata <- tdata[order(tdata$plot, tdata$spcode, tdata$id, tdata$census),]
head(tdata)
tdata$growth.z <- unlist(tapply(tdata$growth, tdata$plot, scale, center=F))
load("panama_NCI_Traits_12.9.15.RDA")
head(tdata)
### Remove LFDP data... (for now)
tdata <- tdata[tdata$plot != 'lfdp',]
### Remove palms (doing it this way to keep them for survival...)
tdata$growth[tdata$palm==T] <- NA
### What to do about growth outliers?
### One option is the remove stems that grew more than a fixed amount (e.g. > 5 sd )
growth.include <- abs(tdata$growth) < sd(tdata$growth, na.rm=T) * 5
growth.include <- ifelse(is.na(growth.include), FALSE, growth.include)
tdata$Growth.Include <- growth.include
### Another is to follow Condit et al. 2004...
# 1. Negative growth must be smaller than  AND
# 2. Postive growth must be less than 75 mm / yr
tdata$Growth.Include.2 <- ((tdata$growth > 4 * (-(0.0062 * tdata$dbh + 0.904))) & (tdata$growth < 75))
tdata$Growth.Include.2 <- ifelse(is.na(tdata$Growth.Include.2), FALSE, tdata$Growth.Include.2)
### Another CONDIT METHOD TO EXCLUDE OUTLIERS
# 1. Negative growth must be smaller than 25% DBH AND
# 2. Postive growth must be less than 75 mm / yr
tdata$Growth.Include.3 <- (!is.na(tdata$growth) & (tdata$growth) < 75 & tdata$growth > (tdata$dbh * -0.25))
# sum(tdata$Growth.Include, na.rm=T)
# sum(tdata$Growth.Include.2, na.rm=T)
# sum(tdata$Growth.Include.3, na.rm=T)
# hist(tdata$growth[tdata$Growth.Include==T & tdata$Growth.Include.2==F], breaks=100)
# hist(tdata$growth[tdata$Growth.Include==F & tdata$Growth.Include.2==T], breaks=100)
tdata <- tdata[tdata$Not.Edge %in% 1,]
tdata <- tdata[ ! tdata$survival %in% NA,]
tdata <- droplevels(tdata)
z.score <- function (data, scale=T, center=T) {
xm <- mean (data, na.rm=TRUE)
xsd <- sd(data, na.rm=TRUE)
if(center==T & scale==T){ xtrans <- (data - xm)/( 2 * xsd) }
if(center==F & scale==T){ xtrans <- (data)/( 2 * xsd) }
if(center==T & scale==F){ xtrans <- (data - xm) }
return(xtrans)
}
log(1)
log(10 + .001)
log(10 + .001) - log(.001)
log(10)
log(.001)
log(.001) - log(.001)
log(1+.001) - log(.001)
log(1+.001) - log(.001)
log(2+.001) - log(.001)
log(3+.001) - log(.001)
log(4+.001) - log(.001)
hist(tdata$nci )
sum(tdata$nci==0)
sum(tdata$nci<0)
sum(tdata$nci>0)
dim(tdata)
hist(log(tdata$nci))
hist(log(tdata$nci+1))
tdata$log.nci <- log(tdata$nci)
hist(log(tdata$dbh))
hist(tdata$dbh)
hist(log(tdata$dbh))
hist(tdata$tnci.hmax)
hist(log(tdata$tnci.hmax))
sum(tdata$tnci.hmax==0)
sum(tdata$tnci.hmax==0, na.rm=T)
sum(tdata$unci.hmax==0, na.rm=T)
hist(tdata$unci.hmax)
hist(log(tdata$unci.hmax))
hist(log(tdata$unci.hmax+1))
hist(log(tdata$unci.hmax+0.001))
hist(log(tdata$tnci.hmax + 1))
hist(log(tdata$unci.hmax + 1))
hist(log(tdata$unci.hmax ))
hist(log(tdata$tnci.wsg))
hist(tdata$tnci.wsg)
hist(log(tdata$tnci.wsg+1))
hist(log(tdata$tnci.wsg))
sum(tdata$tnci.wsg==0)
sum(tdata$tnci.wsg==0, na.rm=T)
tdata$log.tnci.hmax <- log(tdata$tnci.hmax)
tdata$log.tnci.log.ldmc <- log(tdata$tnci.log.ldmc)
tdata$log.tnci.log.lma <- log(tdata$tnci.log.lma)
tdata$log.tnci.log.seed <- log(tdata$tnci.log.seed)
tdata$log.tnci.wsg <- log(tdata$tnci.wsg)
tdata$unci.hmax
sum(tdata$unci.hmax==0)
sum(tdata$unci.hmax==0, na.rm=T)
sum(tdata$unci.hmax>0, na.rm=T)
head(tdata[tdata$unci.hmax==0,])
head(tdata[tdata$unci.hmax%in%0,])
tdata$unci.hmax
hist(log(tdata$unci.hmax + 1))
tdata$log.unci.hmax <- log(tdata$unci.hmax + 1)
tdata$log.unci.log.ldmc <- log(tdata$unci.log.ldmc + 1)
tdata$log.unci.log.lma <- log(tdata$unci.log.lma + 1)
tdata$log.unci.log.seed <- log(tdata$unci.log.seed + 1)
tdata$log.unci.wsg <- log(tdata$unci.wsg + 1)
tdata <- tdata[order(tdata$plot, tdata$spcode, tdata$id, tdata$census),]
tdata$growth.z <- unlist(tapply(tdata$growth, tdata$plot, scale, center=F))
hist(tdata$growth.z)
sort(tdata$growth)
head(sort(tdata$growth))
head(rev(sort(tdata$growth)))
head(rev(sort(tdata$growth)), breaks=1000)
hist(tdata$growth.z, breaks=1000)
hist(tdata$growth.z, breaks=2000)
hist(tdata$growth.z, breaks=2000, xlim=c(-5,5))
dim(tdata[tdata$growth.z < -5,])
dim(tdata[tdata$growth.z > -5,])
dim(tdata[tdata$growth.z > 5,])
dim(tdata[tdata$growth.z > 10,])
dim(tdata[tdata$growth.z > 20,])
dim(tdata[tdata$growth.z > -5 & !is.na(tdata$growth.z),])
dim(tdata[tdata$growth.z < -5 & !is.na(tdata$growth.z),])
dim(tdata[tdata$growth.z > 5 & !is.na(tdata$growth.z),])
load("panama_NCI_Traits_12.9.15.RDA")
head(tdata)
### Remove LFDP data... (for now)
tdata <- tdata[tdata$plot != 'lfdp',]
### Remove palms (doing it this way to keep them for survival...)
tdata$growth[tdata$palm==T] <- NA
### What to do about growth outliers?
### One option is the remove stems that grew more than a fixed amount (e.g. > 5 sd )
growth.include <- abs(tdata$growth) < sd(tdata$growth, na.rm=T) * 5
growth.include <- ifelse(is.na(growth.include), FALSE, growth.include)
tdata$Growth.Include <- growth.include
### Another is to follow Condit et al. 2004...
# 1. Negative growth must be smaller than  AND
# 2. Postive growth must be less than 75 mm / yr
tdata$Growth.Include.2 <- ((tdata$growth > 4 * (-(0.0062 * tdata$dbh + 0.904))) & (tdata$growth < 75))
tdata$Growth.Include.2 <- ifelse(is.na(tdata$Growth.Include.2), FALSE, tdata$Growth.Include.2)
### Another CONDIT METHOD TO EXCLUDE OUTLIERS
# 1. Negative growth must be smaller than 25% DBH AND
# 2. Postive growth must be less than 75 mm / yr
tdata$Growth.Include.3 <- (!is.na(tdata$growth) & (tdata$growth) < 75 & tdata$growth > (tdata$dbh * -0.25))
# sum(tdata$Growth.Include, na.rm=T)
# sum(tdata$Growth.Include.2, na.rm=T)
# sum(tdata$Growth.Include.3, na.rm=T)
# hist(tdata$growth[tdata$Growth.Include==T & tdata$Growth.Include.2==F], breaks=100)
# hist(tdata$growth[tdata$Growth.Include==F & tdata$Growth.Include.2==T], breaks=100)
#################
### DATA PREP ###
#################
### Remove edge trees and otherwise NA trees
tdata <- tdata[tdata$Not.Edge %in% 1,]
tdata <- tdata[ ! tdata$survival %in% NA,]
tdata <- droplevels(tdata)
### Z-TRANSFORM DATA
z.score <- function (data, scale=T, center=T) {
xm <- mean (data, na.rm=TRUE)
xsd <- sd(data, na.rm=TRUE)
if(center==T & scale==T){ xtrans <- (data - xm)/( 2 * xsd) }
if(center==F & scale==T){ xtrans <- (data)/( 2 * xsd) }
if(center==T & scale==F){ xtrans <- (data - xm) }
return(xtrans)
}
### Log-transform coefficients
# log the NCI metric
tdata$log.nci <- log(tdata$nci)
# log the dbh
tdata$log.dbh <- log(tdata$dbh)
# log the tNCI and uNCI metrics
tdata$log.tnci.hmax <- log(tdata$tnci.hmax)
tdata$log.tnci.log.ldmc <- log(tdata$tnci.log.ldmc)
tdata$log.tnci.log.lma <- log(tdata$tnci.log.lma)
tdata$log.tnci.log.seed <- log(tdata$tnci.log.seed)
tdata$log.tnci.wsg <- log(tdata$tnci.wsg)
tdata$log.unci.hmax <- log(tdata$unci.hmax + 1)
tdata$log.unci.log.ldmc <- log(tdata$unci.log.ldmc + 1)
tdata$log.unci.log.lma <- log(tdata$unci.log.lma + 1)
tdata$log.unci.log.seed <- log(tdata$unci.log.seed + 1)
tdata$log.unci.wsg <- log(tdata$unci.wsg + 1)
save(tdata, file='Panama_AnalysisData_12.9.15.RDA')
#######################################
###  GROWTH ANALYSIS  -  SINGLE PLOT ###
#######################################
library(jagsUI)
### Z-TRANSFORM DATA
z.score <- function (data, scale=T, center=T) {
xm <- mean (data, na.rm=TRUE)
xsd <- sd(data, na.rm=TRUE)
if(center==T & scale==T){ xtrans <- (data - xm)/( 2 * xsd) }
if(center==F & scale==T){ xtrans <- (data)/( 2 * xsd) }
if(center==T & scale==F){ xtrans <- (data - xm) }
return(xtrans)
}
#######################################
###  GROWTH ANALYSIS  -  SINGLE PLOT ###
#######################################
library(jagsUI)
### Z-TRANSFORM DATA
z.score <- function (data, scale=T, center=T) {
xm <- mean (data, na.rm=TRUE)
xsd <- sd(data, na.rm=TRUE)
if(center==T & scale==T){ xtrans <- (data - xm)/( 2 * xsd) }
if(center==F & scale==T){ xtrans <- (data)/( 2 * xsd) }
if(center==T & scale==F){ xtrans <- (data - xm) }
return(xtrans)
}
### Running on PC???
pc <- F
if(pc==T){
setwd("K:/Bob/Panama/GIT/Panama_analysis/DATA")
} else {
setwd("/Users/Bob/Projects/Postdoc/Panama/GIT/Panama_analysis/DATA")
}
pc
setwd("/Users/Bob/Projects/Postdoc/Panama/GIT/Panama_analysis/DATA")
if(pc==T){
setwd("K:/Bob/Panama/GIT/Panama_analysis/DATA")
} else {
setwd("/Users/Bob/Projects/Postdoc/Panama/GIT/Panama_analysis/DATA")
}
if(pc==T){
setwd("K:/Bob/Panama/GIT/Panama_analysis/DATA")
} else {
setwd("/Users/Bob/Projects/Postdoc/Panama/GIT/Panama_analysis/DATA")
}
if(pc==T){
setwd("K:/Bob/Panama/GIT/Panama_analysis/DATA")
} else {
setwd("/Users/Bob/Projects/Postdoc/Panama/GIT/Panama_analysis/DATA")
}
if(pc==T){
setwd("K:/Bob/Panama/GIT/Panama_analysis/DATA")
} else {
setwd("/Users/Bob/Projects/Postdoc/Panama/GIT/Panama_analysis/DATA") }
if(pc==T){
setwd("K:/Bob/Panama/GIT/Panama_analysis/DATA")} else {
setwd("/Users/Bob/Projects/Postdoc/Panama/GIT/Panama_analysis/DATA") }
if(pc==T){setwd("K:/Bob/Panama/GIT/Panama_analysis/DATA")} else {
setwd("/Users/Bob/Projects/Postdoc/Panama/GIT/Panama_analysis/DATA") }
pc
if(pc==T){
x <- 1
} else {
x <- 2
}
if(pc == T) {
x <- 1
} else {
x <- 2
}
if(pc == T) {
x <- 1
} else {
x <- 2
}
if(pc == T) {
x <- 1
}else{
x <- 2
}
if(pc == T) {
x <- 1
} else {
x <- 2
}
pc
if (pc == T) {
x <- 1
} else {
x <- 2
}
if (pc == T) {
x <- 1
} else {
x <- 2
}
if (pc == T) {x <- 1} else {x <- 2}
x
if (pc == T) {x <- 1
} else {x <- 2}
if (pc == T){ x <- 1} else {x <- 2}
if (pc == T){
x <- 1} else {x <- 2}
if (pc == T){
x <- 1}
else {
x <- 2}
if (pc == T){
x <- 1
}
else {
x <- 2
}
setwd("K:/Bob/Panama/GIT/Panama_analysis/DATA")
setwd("/Users/Bob/Projects/Postdoc/Panama/GIT/Panama_analysis/DATA")
setwd("K:/Bob/Panama/GIT/Panama_analysis/DATA")
setwd("/Users/Bob/Projects/Postdoc/Panama/GIT/Panama_analysis/DATA")
load("Panama_AnalysisData_12.9.15.RDA")
rownames(tdata) <- NULL
load("Panama_AnalysisData_12.9.15.RDA")
rownames(tdata)
head(tdata)
d <- tdata[tdata$Growth.Include.3 == TRUE,]
d <- tdata[tdata$Growth.Include.3 == TRUE,]
names(d)[names(d)=='WSG'] <- 'wsg'
names(d)[names(d)=='log.LDMC_AVI'] <- 'log.ldmc'
names(d)[names(d)=='log.LMALEAF_AVI'] <- 'log.lma'
names(d)[names(d)=='log.SEED_DRY'] <- 'log.seed'
names(d)[names(d)=='HEIGHT_AVG'] <- 'hmax'
names(d)[names(d)=='WSG'] <- 'wsg'
names(d)[names(d)=='log.LDMC_AVI'] <- 'log.ldmc'
names(d)[names(d)=='WSG'] <- 'wsg'
names(d)[names(d)=='log.LDMC_AVI'] <- 'log.ldmc'
names(d)[names(d)=='log.LMALEAF_AVI'] <- 'log.lma'
names(d)[names(d)=='log.SEED_DRY'] <- 'log.seed'
names(d)[names(d)=='HEIGHT_AVG'] <- 'hmax'
names(d)[names(d)=='WSG'] <- 'wsg'
names(d)[names(d)=='log.LDMC_AVI'] <- 'log.ldmc'
names(d)[names(d)=='WSG'] <- 'wsg'
names(d)[names(d)=='log.LDMC_AVI'] <- 'log.ldmc'
names(d)[names(d)=='log.LMALEAF_AVI'] <- 'log.lma'
names(d)[names(d)=='log.SEED_DRY'] <- 'log.seed'
names(d)[names(d)=='HEIGHT_AVG'] <- 'hmax'
d <- d[!is.na (d[,trait]),]
d <- droplevels(d)
z.score <- function (data, scale=T, center=T) {
xm <- mean (data, na.rm=TRUE)
xsd <- sd(data, na.rm=TRUE)
if(center==T & scale==T){ xtrans <- (data - xm)/( 2 * xsd) }
if(center==F & scale==T){ xtrans <- (data)/( 2 * xsd) }
if(center==T & scale==F){ xtrans <- (data - xm) }
return(xtrans)
}
bci.full4$spcode <- spcodes$spcode[match(bci.full4$sp, spcodes$Mnemonic)]
bci.full4$spcode[grep('swars', bci.full4$sp)] <- 'SWARS1'
library(jagsUI)
### Z-TRANSFORM DATA
z.score <- function (data, scale=T, center=T) {
xm <- mean (data, na.rm=TRUE)
xsd <- sd(data, na.rm=TRUE)
if(center==T & scale==T){ xtrans <- (data - xm)/( 2 * xsd) }
if(center==F & scale==T){ xtrans <- (data)/( 2 * xsd) }
if(center==T & scale==F){ xtrans <- (data - xm) }
return(xtrans)
}
### Running on PC???
pc <- T
### Z-TRANSFORM DATA
z.score <- function (data, scale=T, center=T) {
xm <- mean (data, na.rm=TRUE)
xsd <- sd(data, na.rm=TRUE)
if(center==T & scale==T){ xtrans <- (data - xm)/( 2 * xsd) }
if(center==F & scale==T){ xtrans <- (data)/( 2 * xsd) }
if(center==T & scale==F){ xtrans <- (data - xm) }
return(xtrans)
}
z.score <- function(d){
xm <- mean(d)
sd <- sd(d)
}
